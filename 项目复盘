1-1 项目导读{
  商城页面流程
    登录》产品首页》产品站》产品详情》购物车》订单确认》订单支付(微信/支付宝)》订单列表
  业务开发流程
    需求整理》UI设计》接口规范对接》搭建前端架构开发电商页面》微信/支付宝对接》线上部署

  项目技术:
    商城内容{
      页面{
        商城首页
        登录
        商城产品站
        商城详情
        购物车
        订单确认
        订单支付(微信/支付宝)
        订单列表
      }
      组件系统{
        NavHeader(导航组件)
        NavFooter(底部组件)
        ServiceBar(服务条组件)
        ProductParam(产品参数组件)
        OrderHeader(订单头部组件)
        Loading(加载组件)
        Modal(弹框组件)
        NoData(无数据组件)
        ScanPayCode(支付组件)
      }
    }

    商品技术栈(核心技术){
      基础知识{
        Git命令详细讲解
        Node环境
        VueCli4.0
        DevTools
      }
      动画{
        Vue-Transition
        C3-Transition
        C3-Animation
      }
      框架{
        Vue
        VueRouter
        Vuex
        Axios
        ElementUI
        Scss/Mixin
      }
      项目架构{
        三种跨域方案
        目录结构规范
        常用插件介绍
        Router封装
        Storage封装
        接口错误拦截
        接口环境设置
        Mock设置
      }
      其他知识{
        开发调试技巧
        本地接口代理
        生成支付二维码
        图片懒加载
        SSH公钥配置
        Nginx配置
        项目部署
      }
    }}

1-2 Node环境{
  查询Node版本    node -v}

2-1 Git安装{
  查找Git which -a git 
  查看Git版本  git -version}

2-2 Git配置{
  vscode 首选项》设置》setting.json 》"git.path":"/usr/local/bin/git
  查看配置  git config --list        全局配置--global
          git configg --global user.name "jackbean"
          git config --global user.email "jackbean@51puise.com"
  信任账号凭证 git config --global credential.helper Store
  配置公钥 ssh-keygen -t rsa -C "youremail@example.com"
  克隆项目 git clone

  git常用命令 master：默认开发分支  Head:默认开发分支 origin：默认远程版本库 Head^：Head的父提交
    创建版本库
    {
      克隆远程版本库 git clone <url>
      初始化本地版本库 git init
    }
    提交和修改
    {
      查看状态 git status
      查看改变内容 git diff
      跟踪所以改动过的文件 git add .
      跟踪指定的文件 git add <file>
      文件改名 git mv <old> <new>
      删除文件 git rm <file>
      停止跟踪文件但不删除 git rm --cached <file>
      提交所有更新过的文件 git commit -m "commit message"
      修改最后一次提交 git commit --amend 
    }
    分支与标签
    {
      显示所有的本地分支 git branch
      切换到指定分支或标签 git checkout <branch/tag>
      创建新分支 git branch <new branch>
      删除本地分支 git branch -d <branch>
      列出所有本地标签 git tag
      基于最新提交创建标签 git tag <tagname>
      产出标签 git tag -d <tagname>
    }
    合并与衍合
    {
      git merge <branch>
      git rebase <branch>
    }
    查看提交历史
    {
      查看提交历史 git log
      查看指定文件的提交历史 git log -p <file>
      以列表方式查看指定文件的提交历史 git blame <file>
    }
    撤销
    {
      撤销工作目录中所有未提交文件的修改内容 git reset --hard HEAD
      撤销指定的未修改文件的修改内容 git checkout HEAD <file>
      撤销指定的内容 git revert <commit>
    }
    远程操作
    {
      查看远程版本库信息 git remot -v
      查看指定远程版本库信息 git remote show <remote>
      添加远程版本库 git remote add <remote> <url>
      从远程库获取代码 git fetch <remote>
      下载代码及快速合并 git pull <remote> <branch>
      上传代码及快速合并 git push <remote> <branch>
      删除远程分支或标签 git push <remote> : <branch/tag-name>
      上传所有标签 git push --tags
    }}

3-1 VueCli4{
  自动集成webpack 打包 编译 基本架构(非业务架构)
  npm i -g @Vue/cli}

3-2 VueClie4.0使用{
  创建 vue creater mall
  界面UI功能(内置可视化) vue ui
  安装依赖 axios vue-router vue-x}

前端跨域
    跨域是浏览器为了安全而做出的限制策略
    浏览器请求必须遵循同源策略：同域名、同端口、同协议

4-1 跨域-CORS{
  CORS跨域 - 服务端设置，前端直接调用
  说明: 后台允许前端某个站点进行访问
  axios是pormise结构，用then链式调用}

4-2 跨域-JSONP{
  安装JSONP插件 npm i jsonp --save-del
  JS脚本不是XHR请求
  jsonp(url,(err,res)=>{

  })}

4-3跨域-接口代理{
  接口代理 - 通过修改nginx服务器配置来实现
  说明：前端修改，后台不动
  创建vue.config.js
  proxy:{
      '/api':{
        target:'http://mall-pre.springboot.cn',
        changeOrigin:true,
        pathRewrite:{
          '/api':''
        }
      }
  }}

4-4需求梳理{
  熟悉文档、查看原型、读懂需求
  了解前端设计稿 - 设计前端业务架构
  了解后台接口文档 - 指定相关对接规范
  协调资源
  搭建前端框架}

4-6基本插件{
  vue-lazyload 
  element-ui
  node-sass
  sass-loader
  vue-awesome-swiper
  vue-axios
  vue-cookie 前后端交互 用cookie传递}

4-7路由封装{
  Vue.use()加载插件固定语法
    将NavHeader和NavFooter封到Home中
    将index product detail划分为home的子路由
    将orderList orderConfirm orderPay alipay划分为order的子路由}

4-8 Storage封装{
  Cookie,localStorage,sessionStorage
  区别:  
         储存大小：Cookie4k,Storage5M
         有效期: Cookie拥有有效期，Stroage永久储存
         Cookie会发送到服务端，储存在内存中，Storage只储存在浏览器端
         路径:Cookie有路径限制，Storage只储存在域名下
         API：Cookie没有特定的API,Storage有对应的API

  为什么封装Storage
    Storage本身有API，但是只是简单的key/value形式
    Storage只存储字符串，需要收工转换成json对象
    Storage只能一次性清空，不能单个清空
  export default {
  //存储值
  setItem(key,value,module_name){
    if(module_name){
      let val = this.getItem(module_name);
      val[key] = value;
      this.setItem(module_name,val);

    }else{
      let val = this.getStorage();
      val[key] = value;
      window.sessionStorage.setItem(STORAGE_KEY,JSON.stringify(val));

    }
    
  },
  //获取某一个模块下面的属性user下面的userName
  getItem(key,module_name){
    if(module_name){
      let val = this.getItem(module_name);
      if(val) return val[key];
    }
    return this.getStorage()[key];
  },
  getStorage(){
    return JSON.parse(window.sessionStorage.getItem(STORAGE_KEY) || '{}');
  },
  clear(key,module_name){
    let val = this.getStorage();
    if(module_name){
      if(!val[module_name]) return
      delete val[module_name][key];
    }else{
      delete val[key];
    }
    window.sessionStorage.setItem(STORAGE_KEY,JSON.stringify(val));
  }

4-9 接口错误拦截{
  统一报错
  未登录统一拦截
  请求值，返回值统一处理
  axios
  get请求：
    axios.get('/user',{
      params:{
        ID:12345
      }
    })
  post请求
    axios.post('/user',{
      firstName:'Fred',
      lastName:'Flintstone'
    })}

4-10接口环境设置{
  开发上线的不同阶段，需要不同的配置
  不同的跨域方式，配置不同
  打包的时候统一注入环境参数，统一管理环境，输出不同的版本包

  "serve": "vue-cli-service serve --mode=development",//开发环境
  "test": "vue-cli-service serve --mode=test",
  "build": "vue-cli-service build --mode=production",//生产环境

  switch(process.env.NODE_ENV){
  case 'development':
    baseURL = 'http://dev-mall-pre.springboot.cn/api';
    break;
  case 'test':
    baseURL = 'http://test-mall-pre.springboot.cn/api';
    break;
  case 'prod':
    baseURL = 'http://mall-pre.springboot.cn/api'
    break;
  default:
    baseURL = 'http://mall-pre.springboot.cn/api'
    break;}

4-11 Mock设置{
  开发阶段，为了提高效率，需要提前Mock
  减少代码冗余，灵活插拔
  减少沟通，减少接口联调时间
  
  三种方法
    本地创建json
    easy-mock平台
    集成Mock API  

    本地加载请求静态json的形式
    this.axios.get('/mock/user/login.json').then((res)=>{
        this.res = res;
    })

    通过Easy Mock
    将baseURL地址改为EasyMock生产的地址
    axios.defaults.baseURL = ' https://www.easy-mock.com/mock/5fbe0b3d1bc0682deacbfea7/mimall';
    this.axios.get('/user/login').then((res)=>{
        this.res = res;
    })

    本地集成mockjs实现数据mock
    npm i mockjs --save-dev
    const mock = true;//定义开关
    if(mock){
      require('./mock/api')//import是预编译加载 require执行的时候才会加载
    }}

5-1 Nav-Header组件{
  购物车背景图片css设置:background:url('/imgs/icon-cart-checked.png') no-repeat center
                    background-size:contain 要记得给图标span设宽度哟
  cantainer公共部分抽取至sass
  align-item:center;//垂直方向居中
  cursor:pointer//鼠标移上去带小手
  box-shadow://添加阴影
  font-weight:bold;//加粗
  opacity：0//透明
  &:last-child:before{
    display:none;//最后一个元素不要
  }
  logo：
  //sass部分
  @mixin bgImg($w:0,$h:0,$img:'',$size:contain){
    display:inline-block;
    width:$w;
    height:$h;
    background:url($img) no-repeat center;
    background-size:$size;
  }
  
   a{
    display:inline-block;
    width: 110px;
    height: 55px;
    &:before{
      content: '';
      @include bgImg(55px,55px,'/imgs/mi-logo.png',55px);
      transition:margin .2s;
    }
    &:after{
      content: '';
      @include bgImg(55px,55px,'/imgs/mi-home.png',55px);
      display: inline-block;
    }
    &:hover::before{
      margin-left: -55px;
      transition:margin .2s;
    }
  }

  //flex布局复用
  @mixin flex($hov:space-between,$col:center){
    display:flex;
    justify-content:$hov;
    align-items:$col;
  }


  移到每个部分展示下拉属性
  默认高度 height:0； opacity:0; hover:opacity:1; overflow:hidden隐藏 然后添transition过度

  交互：
  data(){
    return{}//不要定义全局data
  }

  mounted(){
    this.getProductList();
  }//初始化调用方法

  methods:{
    getProductList(){
      this.axios.get('/product',{
        params:{
          //get请求params
          categoryId:'10012'
        }
      }).then((res)={
        if(res.list.length >= 6){
          this.phoneList = res.list.slice(0,6)        
        }
      })
    }
  }

  :key 渲染速度更快，复用率更高 再次渲染会缓存 提高性能
  v-bind:href="'/#/product/'+item.id"
  
  //过滤器
  filters:{
    currency(val){
      if(!val)return '0.00';
      return '￥' + val.toFixed(2) + '元';
    }
  }
  使用:<div class="pro-price">{{item.price | currency}}</div>

  //@click=’goToCart'
  goToCart(){
    this.$router.push('/cart'); 路由跳转为router.push
  }}

5-6 Nav-Footer组件{
  template下面需要一个大div包裹}

5-7 Service-Bar{
  scope局部
  添加父级样式防止复用
  vertical-align:middle;该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐}

5-8 首页轮播功能{
  swiper5
  import 'VueAwesomeSwiper from 'vue-awesome-swiper'//全局
  
  es6解构
  import { swiper.swiperSlide} from 'vue-awesome-swiper'
  import ‘swiper/dist/css/swiper.css'

  <swiper v-bind:options="swiperOption">
    <swiper-slide v-for="(item,index) in slideList" :key="index">
      <a :href="'/#/product/'+item.id"><img :src="item.img"></a>
    </swiper-slide>
    <div class="swiper-pagination" slot="pagination"></div>
    <div class="swiper-button-prev" slot="button-prev"></div>
    <div class="swiper-button-next" slot="button-next"></div>
  </swiper>
  data () {
    return {  
      swiperOption:{
        autoplay:true,//自动播放
        loop:true,//循环播放
        effect:'coverflow',//切换效果
        cubeEffect: {
          shadowOffset: 100,
          shadowScale: 0.6
        },
        pagination:{
          el:'.swiper-pagination',
          clickable:true
        },
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
    }
  }}

5-9首页轮播菜单{
  box-sizing:border-box 包括padding
  图片透明度可通过chrome调整找出颜色
  &:hover{
    background-color:$colorA;
  }

  menuList:[
    [
      {
        id:30,
        img:'/imgs/item-box-1.png',
        name:'小米CC9',
        
      },
      {
        id:31,
        img:'/imgs/item-box-2.png',
        name:'小米8青春版'
      },
      {
        id:32,
        img:'/imgs/item-box-3.jpg',
        name:'Redmi K20 Pro'
      },
      {
        id:33,
        img:'/imgs/item-box-4.jpg',
        name:'移动4G+专区'
      },
    ],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
  ]

  <ul v-for="(item,i) in menuList" :key="i">
    <li v-for="(sub,j) in item" :key="j">
      <a :href="sub? '/#/product/'+ sub.id:'' ">
        <img :src="sub? sub.img: '/imgs/item-box-1.png'" alt="">
        {{sub?sub.name:'小米9'}}
      </a>
    </li>
  </ul>}

5-12手机商品实现{
  css控制最后一个元素
  margin-bottom:14px;
  &:last-child{
    margin-bottom:0;
  }

  &.new-pro{
    background-color: #7ECF68;
  }
  &.kill-pro{
    background-color: #E82626;
  }

  init(){
    this.axios.get('/products',{
      params:{
        categoryId:100012,
        pageSize:14
      }
    }).then((res)=>{
      res.list = res.list.slice(6,14);
      this.phoneList = [res.list.slice(0,4),res.list.slice(4,8)];
    })
  }}

5-14Modal组件{
  <slot></slot>插槽


  <modal 
    title="提示"
    suerText="查看购物车" 
    btnType="1" 
    modalType="middle" 
    :showModal="showModal"
    v-on:submit="goToCart"
    v-on:cancel="showModal=false"
    >
    <template v-slot:body>
      <p>商品添加成功</p>
    </template>	
  </modal>

  //放大
  &:hover{
    transform:scale(1.5);
  }

  使用<transition></transition>嵌套

  transition:all .5s;

  &.slide-enter{
    top:-100%
  }
  &.slide-enter-active{
    top:0;
  }
  &.slide-leave-active{
    top:-100%
  }


  <a href="javascript:;" class="btn" v-if="btnType==1" @click="$emit('submit')">{{sureText}}</a>
  <a href="javascript:;" class="btn" v-if="btnType==2" @click="$emit('cancel')">{{cancelText}}</a> 
  叉叉图标上也需要绑定@click="$emit('cancel')"

  父组件接受自定义事件v-on:submit="goToCart" v-on:cancel="showModal=false"}

5-18图片懒加载{
  性能优化：提高首屏加载速度 提升用户体验 减小带宽 避免首次加载一堆图片
  vue-lazyload
  Vue.use(VueLazyLoad,{
    loading:'/imgs/loading-svg/loading-bars.svg'
  })
  将v-bind:src=“xxx" 换成v-lazy=”xxx" 图片地址加进去要换单引号哟

  一开始不给src赋值，当图片滚动出来再给src赋值加载}

6-1登录{
  单页面数据存在内存中，页面刷新数据消失,使用vuex
  保存用户id：userId:''
  为账号密码两个input框绑定v-module 为登录v-on绑定login方法
  login(){
    let {username,password} = this;
    this.axios.post('/user/login',{
      username,
      password
    }).then((res)=>{
      this.$cookie.set('userId',res.id,{expires:'Session'});
      //this.$store.dispatch('saveUserName',res.username);
      this.saveUserName(res.username);
      this.$router.push({
        name:'index',
        params:{
          from:'login'
        }
      });
    })
  }

  vue-cookie
  Vue.use(vueCookie)
  this.$cookie.set('userId',res.id,{expires:'Session'});

  在入口App.vue获取用户信息和商品数量
  getUser(){
    this.axios.get('/user').then((res={})=>{
      this.$store.dispatch('saveUserName',res.username);
    })
  },
  getCartCount(){
    this.axios.get('/carts/products/sum').then((res=0)=>{
      this.$store.dispatch('saveCartCount',res);
    })
  }

  在mounted中
  if(this.$cookie.get('userId')){
    this.getUser();
    this.getCartCount();
  }}
  获取地址
  let path = location.hash}

7-1vuex{
  为前端解决组件之间数据传输和数据共享
  组件之间是单向流通
  将数据保存在vuex中来共享数据

  视图中的行为需要通过Dispath触发Action 通过Commit提交数据Mutations并存储
  Mutations会自动通过Mutate提交状态到State状态中，状态会通过Render渲染视图
  当状态有延迟需要使用computed

  使用Vue.use使用的插件都会被挂载至Vue实例上，可以通过this获取

  getter是对数据进行过滤以及业务处理

  store
  ├── index.js          # 我们组装模块并导出 store 的地方
  ├── actions.js        # 根级别的 action
  ├── mutations.js      # 根级别的 mutation
  └── modules
      ├── cart.js       # 购物车模块
      └── products.js   # 产品模块

  创建store封装vuex
  main.js使用store

  action封装
  export default {
    saveUserName(context,username){
      context.commit('saveUserName',username);
    },
    saveCartCount(context,count){
      context.commit('saveCartCount',count);
    }
  }

  dispatch派发action
  this.$store.dispatch()

  接口调用需要时间，先读取变量却没有返回值，从而产生误差，所以使用computed计算属性

  import {mapActions} from 'vuex'
  ...mapActions(['saveUserName']) 
    this.saveUserName(res.username);
  等于this.$store.dispatch('saveUserName',res.username);}}

8-1产品站参数组件实现{
  product中的插槽内容
  <product-param v-bind:title="product.name">
    <template v-slot:buy>
      <button class="btn" @click="buy">立即购买</button>
    </template>
  </product-param>}

8-2组件吸顶{
  data(){
      return {
        isFixed:false
      }
    },
    mounted(){
      window.addEventListener('scroll',this.initHeight)
    },
    methods:{
      initHeight(){
        let scrollTop = window.pageYoffset || document.documentElement.scrollTop || document.body.scrollTop;
        this.isFixed =  scrollTop > 152? true:false;
      }
    }

  然后再ProduceParam上给class用v-bind动态绑定is_fixed
  <div class="nav-bar" :class="{'is_fixed':isFixed}">

  CSS中：
  &.is_fixed{
    position:fixed;
    top:0;
    width: 100%;
    box-shadow:0 5px 5px $colorE;
  }

  在页面销毁时去掉事件，防止其他页面滚动的时候该事件还在加载。他还在计算哟
  销毁：生命周期destroyed(){
    window.removeEventListener('scroll',this.initHeight,false)//true为捕获,false为冒泡
  }}

8-3视频模块{
  overlay视频遮罩
  controls视频控件
  muted静音播出
  video标签<video src="" muted autoplay controls="controls"></video>

  object-fit:cover;视频内容覆盖整个窗口

  居中
  top:-50%;
  left:50%;
  transform:translate(-50%,-50%);}

8-4 Slide动画{
  transition过度 单个属性单一的过度动画
  animations动画  比较复杂的过渡效果
  
  transition
  在video-bg给showSlide 设置true
  在icon-close给showSlide设置false

  transition:all .6s
  对video使用v-bind绑定class而不是使用v-if
  <div class="video" v-bind:class="{‘slide’：showSlide}">

  animations
  定义动画
  @keyframes slideDown{
    from{
      top:-50%;
      opacity:0;
    }
    to{
      top:50%;
      opacity:1;
    }
  }
  @keyframes slideUp{
    from{
      top:50%;
      opacity:1;
    }
    to{
      top:-50%;
      opacity:0;
    }
  }

  为.video添加 linear匀速
  &.slideDown{
    animation:slideDown .6s linear;
    top:50%;//使他播放完动画停留在50%
  }
  &.slideUp{
    animation:slideUp .6s linear;
  }

  <div class="video-bg" @click="showSlide='slideDown'"></div>
    <div class="video-box">
      <div class="overlay" @click="showSlide='slideUp'" v-if="showSlide=='slideDown'"></div>
      <div class="video" v-bind:class="showSlide">
        <span class="icon-close" @click="showSlide='slideUp'"></span>

8-6产品站交互{
  获取参数
  let id = this.$route.params.id;
  $route获取参数 $router跳转
  使用参数拼接再来调用信息

  vue中只要对象发生变化会自动触发setter 自动渲染视图

  getProductInfo(){
    let id = this.$route.params.id;
    this.axios.get(`/products/${id}`).then((res)=>{
      this.product = res;
    })
  },
  buy(){
    let id = this.$route.params.id;
    this.$router.push(`/detail/${id}`);
  }
  //修改BUG
  <div class="video-bg" @click="showSlide='slideDown'"></div>
  <div class="video-box" v-show="showSlide">
    <div class="overlay" @click="closeVideo" v-if="closeVideo"></div>
    <div class="video" v-bind:class="showSlide">
      <span class="icon-close" @click="closeVideo"></span>
      <video src="/imgs/product/video.mp4" muted autoplay controls="controls"></video>
    </div>
  </div>}

9-1商品详情交互{
  定义两个通用浮动样式fl fr
  .fl{
  float:left;
  }
  .fr{
    float:right;
  }

  清除浮动
  .clearfix:before,.clearfix:after{
    content: '';
    display: table;
  }
  .clearfix:after{
    clear: both;
  }

  有些时候父盒子无法添加高度
  子盒子浮动后，导致父标签高度塌陷
  由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响
  本质就是清楚浮动元素所造成的影响，如果父盒子本身有高度则无需清除浮动

  清楚浮动后，父级就会根据浮动的子盒子自动检测高度，父级有了高度，则不会影响下面标准流
  clear:both
  策略:闭合浮动

  方法：
  1.额外标签法，(隔墙法) W3C推荐 在最后一个浮动的子元素后面添加一个额外标签添加清除浮动样式
  在浮动元素末尾添加一个空的标签<div style="clear:both"></div>//必须是块级块级块级元素

    清除浮动的本质是清除浮动元素脱离标准流造成的影响
    策略是闭合浮动，只让浮动在盒子内部影响，不影响父盒子外面的其他盒子
    缺点:结构较差

  2.父级添加overflow
  无法显示溢出部分


  3.父级添加after伪元素 是额外标签法的升级版
    .clearfix:after{
      content:"",
      display:block;
      height:0;
      clear:both;
      visibility:hidden
    }
    .clearfix{
      /* IE6、7*/
      *zoom:1;
    }
    没有添加标签，结构简单
    但是需要照顾低版本浏览器 IE67不兼容:after

  4.父级添加双伪元素
    .clearfix:before,.clearfix:after{
      content:"",
      display:table;
    }
    .clearfix:after{
      clear:both;
    }
    .clearfix{
      *zoom:1;
    }
    代码更加简洁

    version:1,//商品版本切换
    <div class="phone fl" :class="{'checked':version==1}" @click="version=1">6GB+64GB 全网通</div>
    <div class="phone fr" :class="{'checked':version==2}" @click="version=2">4GB+64GB 移动4G</div>

    <div class="fl">{{product.name}} {{version==1?'6GB+64GB 全网通':'4GB+64GB 移动4G'}} 深灰色</div>

    购物车添加
    addCart(){
      this.axios.post('/carts',{
        productId:this.id,
        selected: true
      }).then((res={cartProductVoList:0})=>{
        this.$store.dispatch('saveCartCount',res.cartTotalQuantity);
        this.$router.push('/cart');
      });
    }

    index中购物车添加
    addCart(id){				
      this.axios.post('/carts',{
        productId:id,
        selected:true
      }).then((res)=>{
        this.showModal = true;
        this.$store.dispatch('saveCartCount',res.cartTotalQuantity);
      }).catch(()=>{
        this.showModal = true;
      })
    }	}

10-1 Order-Header组件{
  style中的scoped可以作用于子作用域 但是会生产很多无用的标签

  <div class="title">
    <h2>{{title}}<slot name="tip"></slot></h2>
  </div>
  使用插槽

  import 路径+./优先去目录查找，而不加./优先当成插件去node_modules查找

  解决浮动问题

  组件接收外部变量props
  props:{
    title:String
  }

  在组件cart中
  <template v-slot:tip>
    <span>温馨提示：产品是否购买成功，以最终下单为准哦，请尽快结算</span>
  </template>}

10-2购物车列表渲染{
  computed:{
    ...mapState(['username'])
    //相当于
    username(){
      return this.#store.state.username;
    }
  }
  
  ...mapState是一个辅助的方法，帮助展开username

  购物车List列表
  getCartList(){
    this.axios.get('/carts').then((res)=>{
      this.renderData(res);
    })
  }

  // 公共赋值
  renderData(res){
    this.list = res.cartProductVoList || [];
    this.allChecked = res.selectedAll;
    this.cartTotalPrice = res.cartTotalPrice;
    this.checkedNum = this.list.filter(item=>item.productSelected).length;
  }

  选框
  <span class="checkbox" v-bind:class="{'checked':item.productSelected}"  @click="updateCart(item)"></span>

  过滤
  this.checkedNum = this.list.filter(item=>item.productSelected).length;}

10-3购物车全选和非全选{
  // 控制全选功能
  toggleAll(){
    let url = this.allChecked?'/carts/unSelectAll':'/carts/selectAll';
    this.axios.put(url).then((res)=>{
      this.renderData(res);
    })
  }}

10-4购物车更新或删除{
  updateCart(item,type){
    let quantity = item.quantity,
        selected = item.productSelected;
    if(type == '-'){
      if(quantity == 1){
        this.$message.warning('商品至少保留一件');
        return;
      }
      --quantity;
    }else if(type == '+'){
      if(quantity > item.productStock){
        this.$message.warning('购买数量不能超过库存数量');
        return;
      }
      ++quantity;
    }else{
      selected = !item.productSelected;
    }
    this.axios.put(`/carts/${item.productId}`,{
      quantity,
      selected
    }).then((res)=>{
      this.renderData(res);
    })
  }

  delProduct(item){
    this.axios.delete(`/carts/${item.productId}`).then((res)=>{
      this.$message.success('删除成功');
      this.renderData(res);
    });}

  购物车都在循环里面，所以可以传参item}

10-5购物车结算{
  为了安全性，将结算给后台计算
  order(){
    let isCheck = this.list.every(item=>!item.productSelected);
    if(isCheck){
      this.$message.warning('请选择一件商品');
    }else{
      this.$router.push('/order/confirm');
    }
  }

  every指的是数组中的每一项   返回的是布尔值
  var a = [1,4,6,7,9]
  a.every(item => item>0) //true}

11-1ElementUI{
  h2优先级高于class并且已经有了内置样式
  多页面适用于搜索引擎
  页面先加载样式在加载交互

  完整引入
  import Vue from 'vue';
  import ElementUI from 'element-ui';
  import 'element-ui/lib/theme-chalk/index.css';
  import App from './App.vue';

  Vue.use(ElementUI);

  new Vue({
    el: '#app',
    render: h => h(App)
  });

  按需引入：只引入想要的插件而已，打包的时候还是会打包进来
  按需加载：只会把个别打包进来 每个页面都import引入 或者 用prototype挂载到vue上

  安装
  npm i element-ui babel-plugin-component --save-dev
  引入
  import { Message } from 'element-ui';
  import 'element-ui/lib/theme-chalk/index.css'
  Message.warning(" xxx ")

  prototype挂载
  Vue.prototype.$message = Message;
  Vue.use(Message);
  this.$message.success(" xxx ")}

11-3Babel{
  Babel是一个javascript编译器
  使用.babelrc
  {
    "presets":xxx,
    "plugin":xxx
  }
  或者babel.config.js
  module.exports = {
    "presets":xxx,
    "plugin":xxx
  }

  "presets": [
    '@vue/cli-plugin-babel/preset'
  ] ,
  "plugins": [
    [
      "component",
      {
        "libraryName": "element-ui",
        "styleLibraryName": "theme-chalk"
      }
    ]
  ]
  preset > es2015 2016 2017 ...}

11-4退出功能{
  logout(){
    this.axios.post('/user/logout').then(()=>{
      this.$message.success('退出成功');
      this.$cookie.set('userId','',{expires:'-1'});
      this.$store.dispatch('saveUserName','');//用户名称
      this.$store.dispatch('saveCartCount','0');//购物车数量
    })
  }
  cookie set设置 get获取

  登录成功需要再获取购物车的数量
  再次获取
  getCartCount(){
      this.axios.get('/carts/products/sum').then((res=0)=>{
      this.$store.dispatch('saveCartCount',res);
    })
  }
  为了防止资源浪费，在登录页面做参数跳转
  let params = this.$route.params;
  if(params && params.from == 'login' ){
    this.getCartCount();
  }

  query明文传参用path
  而params使用name
  
  在login中
  login(){
    let {username,password} = this;
    this.axios.post('/user/login',{
      username,
      password
    }).then((res)=>{
      this.$cookie.set('userId',res.id,{expires:'Session'});
      //this.$store.dispatch('saveUserName',res.username);
      this.saveUserName(res.username);
      this.$router.push({
        name:'index',
        params:{
          from:'login'
        }
      });
    })
  }

  用户未登录获取用户信息和数量无意义
  首次未登录
  在vue.app中
  mounted(){
    if(this.$cookie.get('userId')){
      this.getUser();
      this.getCartCount()
    }
  }

  将expires改成会话版本session
  this.$cookie.set('userId',res.id,{expires:'Session'});
  关闭页面其实会话没有消失哟}

12-1 订单父组件{
  在每个页面都加进去或着配置路由做slot

  <template>
    <div>
        <order-header v-bind:title="title">
          <template v-slot:tip>
            <span>{{tip}}</span>
          </template>
        </order-header>
        <router-view></router-view>
        <service-bar></service-bar>
        <nav-footer></nav-footer>
    </div>
  </template>

  在order中
  mounted(){
    let path = this.$route.path;
    if(path == '/order/confirm'){
      this.title = '订单确认';
      this.tip = '请认真填写地址'
    }else if(path = '/order/list'){
      this.title = '订单xx'
      this.tip = "请谨防xxx"
    }else if(xxx){

    }
  }}

12-2 地址商品数据加载{
  getCartList(){
    this.axios.get('/carts').then((res)=>{
      let list = res.cartProductVoList;//获取购物车中所有的商品数据
      this.cartTotalPrice = res.cartTotalPrice;//商品总金额
      this.cartList = list.filter(item=>item.productSelected);//过滤
      this.cartList.map((item)=>{
        this.count += item.quantity;
      })
    })
  },

  优化:可是适当用svg替代,减少请求数量
  cdn 本身是一个加速器，加速前端页面的加载 会永久的缓存
}
