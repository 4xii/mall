1-1 项目导读{
  商城页面流程
    登录》产品首页》产品站》产品详情》购物车》订单确认》订单支付(微信/支付宝)》订单列表
  业务开发流程
    需求整理》UI设计》接口规范对接》搭建前端架构开发电商页面》微信/支付宝对接》线上部署

  项目技术:
    商城内容{
      页面{
        商城首页
        登录
        商城产品站
        商城详情
        购物车
        订单确认
        订单支付(微信/支付宝)
        订单列表
      }
      组件系统{
        NavHeader(导航组件)
        NavFooter(底部组件)
        ServiceBar(服务条组件)
        ProductParam(产品参数组件)
        OrderHeader(订单头部组件)
        Loading(加载组件)
        Modal(弹框组件)
        NoData(无数据组件)
        ScanPayCode(支付组件)
      }
    }

    商品技术栈(核心技术){
      基础知识{
        Git命令详细讲解
        Node环境
        VueCli4.0
        DevTools
      }
      动画{
        Vue-Transition
        C3-Transition
        C3-Animation
      }
      框架{
        Vue
        VueRouter
        Vuex
        Axios
        ElementUI
        Scss/Mixin
      }
      项目架构{
        三种跨域方案
        目录结构规范
        常用插件介绍
        Router封装
        Storage封装
        接口错误拦截
        接口环境设置
        Mock设置
      }
      其他知识{
        开发调试技巧
        本地接口代理
        生成支付二维码
        图片懒加载
        SSH公钥配置
        Nginx配置
        项目部署
      }
    }}

1-2 Node环境{
  查询Node版本    node -v}

2-1 Git安装{
  查找Git which -a git 
  查看Git版本  git -version}

2-2 Git配置{
  vscode 首选项》设置》setting.json 》"git.path":"/usr/local/bin/git
  查看配置  git config --list        全局配置--global
          git configg --global user.name "jackbean"
          git config --global user.email "jackbean@51puise.com"
  信任账号凭证 git config --global credential.helper Store
  配置公钥 ssh-keygen -t rsa -C "youremail@example.com"
  克隆项目 git clone

  git常用命令 master：默认开发分支  Head:默认开发分支 origin：默认远程版本库 Head^：Head的父提交
    创建版本库
    {
      克隆远程版本库 git clone <url>
      初始化本地版本库 git init
    }
    提交和修改
    {
      查看状态 git status
      查看改变内容 git diff
      跟踪所以改动过的文件 git add .
      跟踪指定的文件 git add <file>
      文件改名 git mv <old> <new>
      删除文件 git rm <file>
      停止跟踪文件但不删除 git rm --cached <file>
      提交所有更新过的文件 git commit -m "commit message"
      修改最后一次提交 git commit --amend 
    }
    分支与标签
    {
      显示所有的本地分支 git branch
      切换到指定分支或标签 git checkout <branch/tag>
      创建新分支 git branch <new branch>
      删除本地分支 git branch -d <branch>
      列出所有本地标签 git tag
      基于最新提交创建标签 git tag <tagname>
      产出标签 git tag -d <tagname>
    }
    合并与衍合
    {
      git merge <branch>
      git rebase <branch>
    }
    查看提交历史
    {
      查看提交历史 git log
      查看指定文件的提交历史 git log -p <file>
      以列表方式查看指定文件的提交历史 git blame <file>
    }
    撤销
    {
      撤销工作目录中所有未提交文件的修改内容 git reset --hard HEAD
      撤销指定的未修改文件的修改内容 git checkout HEAD <file>
      撤销指定的内容 git revert <commit>
    }
    远程操作
    {
      查看远程版本库信息 git remot -v
      查看指定远程版本库信息 git remote show <remote>
      添加远程版本库 git remote add <remote> <url>
      从远程库获取代码 git fetch <remote>
      下载代码及快速合并 git pull <remote> <branch>
      上传代码及快速合并 git push <remote> <branch>
      删除远程分支或标签 git push <remote> : <branch/tag-name>
      上传所有标签 git push --tags
    }}

3-1 VueCli4{
  自动集成webpack 打包 编译 基本架构(非业务架构)
  npm i -g @Vue/cli}

3-2 VueClie4.0使用{
  创建 vue creater mall
  界面UI功能(内置可视化) vue ui
  安装依赖 axios vue-router vue-x}

前端跨域
    跨域是浏览器为了安全而做出的限制策略
    浏览器请求必须遵循同源策略：同域名、同端口、同协议

4-1 跨域-CORS{
  CORS跨域 - 服务端设置，前端直接调用
  说明: 后台允许前端某个站点进行访问
  axios是pormise结构，用then链式调用}

4-2 跨域-JSONP{
  安装JSONP插件 npm i jsonp --save-del
  JS脚本不是XHR请求
  jsonp(url,(err,res)=>{

  })}

4-3跨域-接口代理{
  接口代理 - 通过修改nginx服务器配置来实现
  说明：前端修改，后台不动
  创建vue.config.js
  proxy:{
      '/api':{
        target:'http://mall-pre.springboot.cn',
        changeOrigin:true,
        pathRewrite:{
          '/api':''
        }
      }
  }}

4-4需求梳理{
  熟悉文档、查看原型、读懂需求
  了解前端设计稿 - 设计前端业务架构
  了解后台接口文档 - 指定相关对接规范
  协调资源
  搭建前端框架}

4-6基本插件{
  vue-lazyload 
  element-ui
  node-sass
  sass-loader
  vue-awesome-swiper
  vue-axios
  vue-cookie 前后端交互 用cookie传递}

4-7路由封装{
  Vue.use()加载插件固定语法
    将NavHeader和NavFooter封到Home中
    将index product detail划分为home的子路由
    将orderList orderConfirm orderPay alipay划分为order的子路由}

4-8 Storage封装{
  Cookie,localStorage,sessionStorage
  区别:  
         储存大小：Cookie4k,Storage5M
         有效期: Cookie拥有有效期，Stroage永久储存
         Cookie会发送到服务端，储存在内存中，Storage只储存在浏览器端
         路径:Cookie有路径限制，Storage只储存在域名下
         API：Cookie没有特定的API,Storage有对应的API

  为什么封装Storage
    Storage本身有API，但是只是简单的key/value形式
    Storage只存储字符串，需要收工转换成json对象
    Storage只能一次性清空，不能单个清空
  export default {
  //存储值
  setItem(key,value,module_name){
    if(module_name){
      let val = this.getItem(module_name);
      val[key] = value;
      this.setItem(module_name,val);

    }else{
      let val = this.getStorage();
      val[key] = value;
      window.sessionStorage.setItem(STORAGE_KEY,JSON.stringify(val));

    }
    
  },
  //获取某一个模块下面的属性user下面的userName
  getItem(key,module_name){
    if(module_name){
      let val = this.getItem(module_name);
      if(val) return val[key];
    }
    return this.getStorage()[key];
  },
  getStorage(){
    return JSON.parse(window.sessionStorage.getItem(STORAGE_KEY) || '{}');
  },
  clear(key,module_name){
    let val = this.getStorage();
    if(module_name){
      if(!val[module_name]) return
      delete val[module_name][key];
    }else{
      delete val[key];
    }
    window.sessionStorage.setItem(STORAGE_KEY,JSON.stringify(val));
  }

4-9 接口错误拦截{
  统一报错
  未登录统一拦截
  请求值，返回值统一处理
  axios
  get请求：
    axios.get('/user',{
      params:{
        ID:12345
      }
    })
  post请求
    axios.post('/user',{
      firstName:'Fred',
      lastName:'Flintstone'
    })}

4-10接口环境设置{
  开发上线的不同阶段，需要不同的配置
  不同的跨域方式，配置不同
  打包的时候统一注入环境参数，统一管理环境，输出不同的版本包

  "serve": "vue-cli-service serve --mode=development",//开发环境
  "test": "vue-cli-service serve --mode=test",
  "build": "vue-cli-service build --mode=production",//生产环境

  switch(process.env.NODE_ENV){
  case 'development':
    baseURL = 'http://dev-mall-pre.springboot.cn/api';
    break;
  case 'test':
    baseURL = 'http://test-mall-pre.springboot.cn/api';
    break;
  case 'prod':
    baseURL = 'http://mall-pre.springboot.cn/api'
    break;
  default:
    baseURL = 'http://mall-pre.springboot.cn/api'
    break;}

4-11 Mock设置{
  开发阶段，为了提高效率，需要提前Mock
  减少代码冗余，灵活插拔
  减少沟通，减少接口联调时间
  
  三种方法
    本地创建json
    easy-mock平台
    集成Mock API  

    本地加载请求静态json的形式
    this.axios.get('/mock/user/login.json').then((res)=>{
        this.res = res;
    })

    通过Easy Mock
    将baseURL地址改为EasyMock生产的地址
    axios.defaults.baseURL = ' https://www.easy-mock.com/mock/5fbe0b3d1bc0682deacbfea7/mimall';
    this.axios.get('/user/login').then((res)=>{
        this.res = res;
    })

    本地集成mockjs实现数据mock
    npm i mockjs --save-dev
    const mock = true;//定义开关
    if(mock){
      require('./mock/api')//import是预编译加载 require执行的时候才会加载
    }}

5-1 Nav-Header组件{
  购物车背景图片css设置:background:url('/imgs/icon-cart-checked.png') no-repeat center
                    background-size:contain 要记得给图标span设宽度哟
  cantainer公共部分抽取至sass
  align-item:center;//垂直方向居中
  cursor:pointer//鼠标移上去带小手
  box-shadow://添加阴影
  font-weight:bold;//加粗
  opacity：0//透明
  &:last-child:before{
    display:none;//最后一个元素不要
  }
  logo：
  //sass部分
  @mixin bgImg($w:0,$h:0,$img:'',$size:contain){
    display:inline-block;
    width:$w;
    height:$h;
    background:url($img) no-repeat center;
    background-size:$size;
  }
  
   a{
    display:inline-block;
    width: 110px;
    height: 55px;
    &:before{
      content: '';
      @include bgImg(55px,55px,'/imgs/mi-logo.png',55px);
      transition:margin .2s;
    }
    &:after{
      content: '';
      @include bgImg(55px,55px,'/imgs/mi-home.png',55px);
      display: inline-block;
    }
    &:hover::before{
      margin-left: -55px;
      transition:margin .2s;
    }
  }

  //flex布局复用
  @mixin flex($hov:space-between,$col:center){
    display:flex;
    justify-content:$hov;
    align-items:$col;
  }


  移到每个部分展示下拉属性
  默认高度 height:0； opacity:0; hover:opacity:1; overflow:hidden隐藏 然后添transition过度

  交互：
  data(){
    return{}//不要定义全局data
  }

  mounted(){
    this.getProductList();
  }//初始化调用方法

  methods:{
    getProductList(){
      this.axios.get('/product',{
        params:{
          //get请求params
          categoryId:'10012'
        }
      }).then((res)={
        if(res.list.length >= 6){
          this.phoneList = res.list.slice(0,6)        
        }
      })
    }
  }

  :key 渲染速度更快，复用率更高 再次渲染会缓存 提高性能
  v-bind:href="'/#/product/'+item.id"
  
  //过滤器
  filters:{
    currency(val){
      if(!val)return '0.00';
      return '￥' + val.toFixed(2) + '元';
    }
  }
  使用:<div class="pro-price">{{item.price | currency}}</div>

  //@click=’goToCart'
  goToCart(){
    this.$router.push('/cart'); 路由跳转为router.push
  }}

5-6 Nav-Footer组件{
  template下面需要一个大div包裹}

5-7 Service-Bar{
  scope局部
  添加父级样式防止复用
  vertical-align:middle;该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐}

5-8 首页轮播功能{
  swiper5
  import 'VueAwesomeSwiper from 'vue-awesome-swiper'//全局
  
  es6解构
  import { swiper.swiperSlide} from 'vue-awesome-swiper'
  import ‘swiper/dist/css/swiper.css'

  <swiper v-bind:options="swiperOption">
    <swiper-slide v-for="(item,index) in slideList" :key="index">
      <a :href="'/#/product/'+item.id"><img :src="item.img"></a>
    </swiper-slide>
    <div class="swiper-pagination" slot="pagination"></div>
    <div class="swiper-button-prev" slot="button-prev"></div>
    <div class="swiper-button-next" slot="button-next"></div>
  </swiper>
  data () {
    return {  
      swiperOption:{
        autoplay:true,//自动播放
        loop:true,//循环播放
        effect:'coverflow',//切换效果
        cubeEffect: {
          shadowOffset: 100,
          shadowScale: 0.6
        },
        pagination:{
          el:'.swiper-pagination',
          clickable:true
        },
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
        },
    }
  }}

5-9首页轮播菜单{
  box-sizing:border-box 包括padding
  图片透明度可通过chrome调整找出颜色
  &:hover{
    background-color:$colorA;
  }

  menuList:[
    [
      {
        id:30,
        img:'/imgs/item-box-1.png',
        name:'小米CC9',
        
      },
      {
        id:31,
        img:'/imgs/item-box-2.png',
        name:'小米8青春版'
      },
      {
        id:32,
        img:'/imgs/item-box-3.jpg',
        name:'Redmi K20 Pro'
      },
      {
        id:33,
        img:'/imgs/item-box-4.jpg',
        name:'移动4G+专区'
      },
    ],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
  ]

  <ul v-for="(item,i) in menuList" :key="i">
    <li v-for="(sub,j) in item" :key="j">
      <a :href="sub? '/#/product/'+ sub.id:'' ">
        <img :src="sub? sub.img: '/imgs/item-box-1.png'" alt="">
        {{sub?sub.name:'小米9'}}
      </a>
    </li>
  </ul>}

5-12手机商品实现{

}